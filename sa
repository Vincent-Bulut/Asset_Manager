
from sqlalchemy.exc import SQLAlchemyError, IntegrityError

def post_delegated(self, req: RequestDelegatedUser):
    try:
        # Vérification si l'utilisateur existe déjà
        existing_user = self.session.query(Users).filter(Users.ut == req.ut).first()
        if not existing_user:
            # Création d'un nouvel utilisateur si non existant
            user_data = UserModel(**req.dict())
            new_user = Users(**user_data.dict())
            self.session.add(new_user)
        else:
            print(f"Utilisateur avec ut={req.ut} existe déjà.")

        # Vérification si l'assistant existe déjà
        existing_assistant = self.session.query(Assistants).filter(Assistants.ut == req.ut).first()
        if not existing_assistant:
            # Création d'un nouvel assistant si non existant
            new_assistant = Assistants(ut=req.ut)
            self.session.add(new_assistant)
        else:
            print(f"Assistant avec ut={req.ut} existe déjà.")

        # Ajout de la relation BmAssistant (vérification nécessaire si elle ne doit pas être dupliquée)
        existing_bm_assistant = self.session.query(BmAssistants).filter(
            BmAssistants.ut_assistant == req.ut,
            BmAssistants.ut_bm == req.ut_bm
        ).first()
        if not existing_bm_assistant:
            new_bm_assistant = BmAssistants(ut_assistant=req.ut, ut_bm=req.ut_bm)
            self.session.add(new_bm_assistant)
        else:
            print(f"La relation entre assistant={req.ut} et bm={req.ut_bm} existe déjà.")

        # Commit des changements
        self.session.commit()

    except IntegrityError as e:
        self.session.rollback()
        print(f"Erreur d'intégrité : {e}")
    except SQLAlchemyError as e:
        self.session.rollback()
        print(f"Erreur lors de la création : {e}")