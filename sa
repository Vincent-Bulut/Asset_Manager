
Pour envoyer les données d’un formulaire à votre API FastAPI depuis le front-end en utilisant Axios, voici un guide étape par étape.

1. Configurer le back-end avec FastAPI

Supposons que vous avez une API FastAPI avec une route pour recevoir les données du formulaire :

from fastapi import FastAPI, Form
from pydantic import BaseModel

app = FastAPI()

# Option 1: Utilisation d'un modèle Pydantic
class FormData(BaseModel):
    folder_name: str
    description: str
    category: str

@app.post("/submit-form")
async def submit_form(data: FormData):
    return {"message": "Form submitted successfully!", "data": data}

# Option 2: Utilisation de paramètres Form
@app.post("/submit-form-raw")
async def submit_form_raw(
    folder_name: str = Form(...),
    description: str = Form(...),
    category: str = Form(...)
):
    return {"message": "Form submitted successfully!", "folder_name": folder_name}

2. Front-end : Envoyer le formulaire avec Axios

Dans votre composant Svelte :

HTML :

Voici un formulaire que vous avez déjà construit avec Svelte :

<script>
  import axios from 'axios';

  let folderName = '';
  let description = '';
  let category = '';

  async function handleSubmit() {
    try {
      const response = await axios.post('http://localhost:8000/submit-form', {
        folder_name: folderName,
        description: description,
        category: category
      });
      console.log('Success:', response.data);
    } catch (error) {
      console.error('Error submitting form:', error);
    }
  }
</script>

<form on:submit|preventDefault={handleSubmit}>
  <label for="folderName">Folder Name:</label>
  <input id="folderName" bind:value={folderName} type="text" required />

  <label for="description">Description:</label>
  <textarea id="description" bind:value={description}></textarea>

  <label for="category">Category:</label>
  <select id="category" bind:value={category}>
    <option value="">Select</option>
    <option value="work">Work</option>
    <option value="personal">Personal</option>
  </select>

  <button type="submit">Submit</button>
</form>

3. Explication

Axios POST Request :

await axios.post('http://localhost:8000/submit-form', {
  folder_name: folderName,
  description: description,
  category: category
});

	•	URL : http://localhost:8000/submit-form est l’endpoint exposé par votre API.
	•	Payload : Les données du formulaire sont envoyées sous forme d’un objet JSON.
Cela correspond à la structure définie dans le modèle Pydantic.

4. Alternatives : Envoi de données de type application/x-www-form-urlencoded

Si votre API attend des données dans un format form-data ou application/x-www-form-urlencoded (option avec Form dans FastAPI), modifiez la requête comme suit :

import axios from 'axios';
import qs from 'qs'; // Pour encoder les données si besoin

async function handleSubmit() {
  try {
    const response = await axios.post('http://localhost:8000/submit-form-raw', 
      qs.stringify({
        folder_name: folderName,
        description: description,
        category: category
      }), 
      {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
      }
    );
    console.log('Success:', response.data);
  } catch (error) {
    console.error('Error submitting form:', error);
  }
}

5. Tester et vérifier

	•	Démarrez votre serveur FastAPI :

uvicorn main:app --reload


	•	Ouvrez votre formulaire dans le navigateur et soumettez-le. Vous devriez voir la réponse dans la console du navigateur ou de l’API.

6. Gestion des erreurs

Vous pouvez ajouter des vérifications côté API et gérer les erreurs côté client en utilisant un try/catch pour capturer les problèmes (par exemple, validation des champs).

Résumé :

	•	Utilisez Axios pour envoyer des requêtes POST à votre API FastAPI.
	•	Définissez l’endpoint et les formats de données correctement en fonction de ce que FastAPI attend.
	•	Adaptez l’envoi des données (JSON ou form-urlencoded) selon vos besoins.