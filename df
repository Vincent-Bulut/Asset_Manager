
Yes! You can use https in your API host variable while using HttpOperator. However, HttpOperator requires an http_conn_id, but you can override it dynamically by setting the full API host with https inside an Airflow Variable.

‚úÖ Solution: Using HttpOperator with HTTPS API (Without Predefined Connection)

You will override the http_conn_id by dynamically passing the full https host URL in Airflow Variables.

1Ô∏è‚É£ Store API Host and Certificate in Airflow Variables

Go to Airflow UI ‚Üí Admin > Variables ‚Üí Create a new variable:
	‚Ä¢	Key: API_HOST
	‚Ä¢	Value: https://uda.wac.dev.emea.cid
	‚Ä¢	Key: CERT_PATH
	‚Ä¢	Value: /home/airflow/airflow/dags/xxx.pem

2Ô∏è‚É£ Define a Dummy HTTP Connection in Airflow

Since HttpOperator requires an http_conn_id, create a fake connection:
	1.	Go to Airflow UI ‚Üí Admin > Connections
	2.	Create a new connection:
	‚Ä¢	Conn ID: dummy_http
	‚Ä¢	Conn Type: HTTP
	‚Ä¢	Host: http://dummy_host (This will be overridden dynamically)

3Ô∏è‚É£ Use HttpOperator with HTTPS (Override Host Dynamically)

from airflow import DAG
from airflow.providers.http.operators.http import HttpOperator
from airflow.models import Variable
from airflow.utils.dates import days_ago
import json

# Get Airflow Variables
API_HOST = Variable.get("API_HOST")  # Example: "https://uda.wac.dev.emea.cid"
CERT_PATH = Variable.get("CERT_PATH")  # Example: "/home/airflow/airflow/dags/xxx.pem"

dag = DAG(
    'http_call_with_https',
    default_args={'owner': 'airflow'},
    schedule_interval=None,
    start_date=days_ago(1),
    catchup=False
)

call_api_task = HttpOperator(
    task_id='call_api',
    http_conn_id="dummy_http",  # A fake HTTP connection (host will be overridden)
    endpoint='/api/data',  # API endpoint suffix
    method='GET',
    headers={"Content-Type": "application/json"},
    extra_options={
        "verify": CERT_PATH,  # Pass the .pem certificate for SSL verification
        "host": API_HOST  # Override the host dynamically with HTTPS
    },
    log_response=True,
    dag=dag
)

call_api_task

üìå Explanation
	‚Ä¢	http_conn_id="dummy_http" ‚Üí Required but overridden dynamically.
	‚Ä¢	Full https URL injected dynamically ‚Üí extra_options={"host": API_HOST}
	‚Ä¢	SSL Support ‚Üí .pem certificate for verification via extra_options={"verify": CERT_PATH}
	‚Ä¢	Endpoint uses only the suffix (/api/data), since API_HOST provides the full https domain.

üî• Alternative: Use PythonOperator with requests

If HttpOperator does not support HTTPS properly, use requests inside PythonOperator instead.

import requests
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.models import Variable
from airflow.utils.dates import days_ago

# Get Airflow Variables
API_HOST = Variable.get("API_HOST")  # Full HTTPS URL
CERT_PATH = Variable.get("CERT_PATH")  # .pem SSL Certificate

def call_api():
    """Call API with SSL certificate and HTTPS"""
    
    url = f"{API_HOST}/api/data"
    
    headers = {"Content-Type": "application/json"}
    
    response = requests.get(url, headers=headers, verify=CERT_PATH)
    
    print(f"Response: {response.text}")

dag = DAG(
    'http_call_with_requests_https',
    default_args={'owner': 'airflow'},
    schedule_interval=None,
    start_date=days_ago(1),
    catchup=False
)

call_api_task = PythonOperator(
    task_id='call_api',
    python_callable=call_api,
    dag=dag
)

call_api_task

üìå Summary: Best Approaches

Approach	Supports HTTPS?	How?	Example
HttpOperator with extra_options	‚úÖ Yes	Overrides host dynamically	extra_options={"host": Variable.get("API_HOST")}
PythonOperator with requests	‚úÖ Yes	Uses requests.get(url, verify=cert)	requests.get(https://..., verify=Variable.get("CERT_PATH"))

üöÄ Next Steps
	1.	Check if Airflow Variables are correct:

airflow variables get API_HOST
airflow variables get CERT_PATH


	2.	Ensure the fake dummy_http connection exists:

airflow connections list | grep dummy_http


	3.	Test HTTPS API manually with curl:

curl --cacert $(airflow variables get CERT_PATH) $(airflow variables get API_HOST)/api/data

	‚Ä¢	‚úÖ If it works ‚Üí Airflow should work too.
	‚Ä¢	‚ùå If error ‚Üí Check SSL certificates.

Now HttpOperator supports HTTPS API calls with SSL certificates dynamically! üöÄ Let me know if you need further adjustments.