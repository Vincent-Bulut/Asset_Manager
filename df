
import axios from 'axios';

async function envoyerXMLVersAPI(xml) {
    try {
        // Envoyer la requête POST
        const response = await axios.post(
            "/export/zip-and-encrypt",
            null, // Pas de body nécessaire ici
            {
                params: { dac6_xml: xml }, // Envoi de la chaîne dans les paramètres
                responseType: "blob", // Indique qu'on attend une réponse binaire
            }
        );

        // Extraire le Content-Disposition
        const contentDisposition = response.headers["content-disposition"];
        let fileName = "fichier_par_defaut.gpg"; // Nom par défaut si non défini

        if (contentDisposition) {
            const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
            if (fileNameMatch && fileNameMatch[1]) {
                fileName = fileNameMatch[1]; // Extraire le nom du fichier
            }
        }

        // Créer un Blob à partir de la réponse
        const blob = new Blob([response.data], { type: "application/octet-stream" });

        // Générer une URL temporaire pour le Blob
        const downloadUrl = URL.createObjectURL(blob);

        // Créer un lien de téléchargement dynamique
        const link = document.createElement("a");
        link.href = downloadUrl;
        link.download = fileName; // Utiliser le nom extrait
        document.body.appendChild(link);
        link.click(); // Simuler un clic pour démarrer le téléchargement
        document.body.removeChild(link); // Nettoyer après le téléchargement

        // Libérer l'URL temporaire
        URL.revokeObjectURL(downloadUrl);

        console.log("Fichier téléchargé :", fileName);
    } catch (error) {
        console.error("Erreur lors de l'appel API :", error.response ? error.response.data : error.message);
    }
}