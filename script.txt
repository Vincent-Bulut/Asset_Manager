
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import DBAPIError

Session = sessionmaker(bind=engine)

def update_trd_time(req: TraderTimeModel):
    ts = utils.get_current_timestamp()
    session = Session()
    try:
        # Add row-level locking with 'with_for_update'
        trd_time = session.query(TraderTimes).filter(
            TraderTimes.id_trader == req.id_trader,
            TraderTimes.id_structure == req.id_structure
        ).with_for_update().one_or_none()

        if trd_time:
            trd_time.time_month = req.time_month
            trd_time.time_year = req.time_year
            trd_time.time_value = req.time_value
            trd_time.timestamp = ts
            session.commit()
    except DBAPIError as e:
        session.rollback()  # Rollback in case of database error
        # Implement a retry mechanism or send an appropriate response back to the client
        raise e
    finally:
        session.close()