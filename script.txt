<script>
  let searchQuery = '';
  let users = [];
  let isSearching = false;
  const endpoint = 'http://localhost:8000/admin/users';

  async function searchUsers() {
    if (searchQuery.trim().length === 0) {
      users = [];
      return;
    }

    isSearching = true;
    try {
      // Adjust the endpoint URL according to how your API expects to receive the search query
      const response = await fetch(`${endpoint}?search=${encodeURIComponent(searchQuery)}`);
      if (response.ok) {
        users = await response.json();
      } else {
        console.error('Error fetching users:', response.statusText);
        users = [];
      }
    } catch (error) {
      console.error('Network error:', error);
      users = [];
    }
    isSearching = false;
  }

  // Optional: Debounce the search to avoid too many API calls
  let timeout;
  function handleInput() {
    clearTimeout(timeout);
    timeout = setTimeout(searchUsers, 500); // Wait 500ms after the user stops typing to call the function
  }
</script>

<div class="search-bar-container">
  <input
    class="search-input"
    type="text"
    placeholder="Search users..."
    bind:value={searchQuery}
    on:input={handleInput} />
  {#if isSearching}
    <p>Searching...</p>
  {/if}
</div>

{#if users.length > 0}
  <ul>
    {#each users as user}
      <li>{user.full_name}</li> <!-- Replace 'full_name' with the actual property name from your JSON response -->
    {/each}
  </ul>
{/if}

<style>
  /* Vos styles ici */
</style>
