from sqlalchemy.orm import sessionmaker
from your_module import base  # Assurez-vous d'importer les classes de base de SQLAlchemy
from your_module import Entity, Traders, TraderAllocation, TraderTimes, Structure  # Importez vos classes de modèle

# Créer une session avec la base de données
Session = sessionmaker(bind=your_engine)
session = Session()

# Remplacer 'some_ut' par le 'ut' réel du trader que vous recherchez
trader_ut = 'some_ut'

# Construction de la requête
result = session.query(
    Traders,
    Entity,
    TraderAllocation,
    TraderTimes,
    Structure
).join(
    Entity, Entity.entity_code == Traders.entity_code
).join(
    TraderAllocation, TraderAllocation.id_trader == Traders.id_trader
).join(
    TraderTimes, TraderTimes.id_trader == Traders.id_trader
).join(
    Structure, Structure.id_structure == TraderAllocation.id_structure
).filter(
    Traders.ut == trader_ut
).all()

# Fermer la session
session.close()

# Traiter le résultat
for item in result:
    trader, entity, trader_allocation, trader_times, structure = item
    # Ici vous pouvez accéder aux attributs de chaque objet
    # Exemple: trader.name, entity.country, etc.


from sqlalchemy import select
from sqlalchemy.orm import sessionmaker, joinedload
from your_module import Entity, Traders, TraderAllocation, TraderTimes, Structure  # Remplacez par les noms appropriés de vos classes

# Créer une session avec la base de données
Session = sessionmaker(bind=your_engine)
session = Session()

# Remplacer 'some_ut' par le 'ut' réel du trader que vous recherchez
trader_ut = 'some_ut'

# Construction de la requête en utilisant `select()`
stmt = (
    select(Traders).
    options(joinedload(Traders.entity),
            joinedload(Traders.structures_alloc).joinedload(TraderAllocation.trader).
            joinedload(TraderAllocation.trader_times),
            joinedload(Traders.structures_alloc).joinedload(TraderAllocation.structure)).
    where(Traders.ut == trader_ut)
)

# Exécution de la requête
result = session.execute(stmt).scalars().all()

# Fermer la session
session.close()

# Affichage des résultats
for trader in result:
    print(trader.ut, trader.entity, trader.structures_alloc, ...)
    # Vous pouvez imprimer ou manipuler les données comme vous le souhaitez