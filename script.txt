
Oui, vous pouvez récupérer le type de fichier côté backend en utilisant les informations fournies par l’objet UploadFile de FastAPI. Voici les étapes détaillées pour identifier le type de fichier, notamment son extension ou son type MIME :

Récupérer le type de fichier avec FastAPI

	1.	Utiliser le champ filename :
L’objet UploadFile a un attribut filename qui contient le nom du fichier. Vous pouvez extraire l’extension en utilisant ce nom.
	2.	Vérifier le type MIME :
L’objet UploadFile possède aussi un attribut content_type, qui indique le type MIME (par exemple, application/pdf, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet pour Excel, etc.).
	3.	Lire le contenu pour une analyse plus approfondie (optionnel) :
Si nécessaire, vous pouvez lire le contenu du fichier pour détecter son type à l’aide d’une bibliothèque comme python-magic ou mimetypes, qui inspecte le contenu du fichier.

Exemple de Code

Voici un exemple complet en FastAPI :

from fastapi import FastAPI, UploadFile, File
import mimetypes

app = FastAPI()

@app.post("/uploadfile/")
async def upload_file(file: UploadFile = File(...)):
    # Obtenir le nom du fichier et son extension
    filename = file.filename
    file_extension = filename.split(".")[-1].lower()

    # Obtenir le type MIME
    mime_type = file.content_type

    # Si besoin, vérification supplémentaire avec mimetypes
    guessed_mime_type, _ = mimetypes.guess_type(filename)

    return {
        "filename": filename,
        "extension": file_extension,
        "mime_type_from_upload": mime_type,
        "mime_type_from_guess": guessed_mime_type,
    }

Explications

	1.	file.filename :
Donne le nom original du fichier tel qu’il a été uploadé par le client. Utile pour extraire l’extension.
	2.	file.content_type :
Donne le type MIME envoyé par le client dans l’en-tête HTTP.
	3.	mimetypes.guess_type :
Permet de déduire le type MIME en fonction du nom du fichier. Cette méthode est utile si l’en-tête HTTP est incorrect.
	4.	Lecture du contenu (optionnel) :
Si vous voulez vérifier plus en profondeur (par exemple, si l’extension ne correspond pas au contenu réel), utilisez une bibliothèque comme python-magic pour inspecter le contenu binaire.

Exemple avec python-magic :

import magic

@app.post("/uploadfile-detect/")
async def detect_file_type(file: UploadFile = File(...)):
    # Lire le contenu du fichier
    content = await file.read()

    # Utiliser python-magic pour détecter le type MIME
    mime = magic.Magic(mime=True)
    detected_mime_type = mime.from_buffer(content)

    return {
        "filename": file.filename,
        "mime_type_from_magic": detected_mime_type,
    }

Installation de python-magic

pip install python-magic

Conclusion

	•	Utilisez file.content_type pour récupérer rapidement le type MIME envoyé par le client.
	•	Pour une vérification avancée, combinez cela avec mimetypes.guess_type ou python-magic pour analyser le contenu.
	•	Assurez-vous de vérifier la validité de l’extension si elle est critique pour votre application (par exemple, empêcher le téléchargement d’un fichier malveillant).