<script>
  let searchQuery = '';
  let users = [];
  let isSearching = false;
  let errorMessage = '';
  const endpoint = 'http://localhost:8000/admin/users';

  async function searchUsers() {
    if (searchQuery.trim().length === 0) {
      users = [];
      return;
    }

    isSearching = true;
    errorMessage = '';

    try {
      const response = await fetch(`${endpoint}?search=${encodeURIComponent(searchQuery)}`);
      if (response.ok) {
        const data = await response.json();
        // Assuming the API returns an array of users.
        users = data.filter(user => user.full_name.includes(searchQuery) || user.ut.includes(searchQuery));
      } else {
        errorMessage = `Error: ${response.statusText}`;
        console.error('Error fetching users:', response.statusText);
      }
    } catch (error) {
      errorMessage = 'Network error occurred';
      console.error('Network error:', error);
    } finally {
      isSearching = false;
    }
  }

  // Debounce the search to avoid too many API calls
  let timeout;
  function handleInput() {
    clearTimeout(timeout);
    timeout = setTimeout(searchUsers, 300); // Wait 300ms after the user stops typing to call the function
  }
</script>

<div class="search-bar-container">
  <input
    class="search-input"
    type="text"
    placeholder="Search users..."
    bind:value={searchQuery}
    on:input={handleInput}
  />
  {#if isSearching}
    <p>Searching...</p>
  {/if}
  {#if errorMessage}
    <p class="error">{errorMessage}</p>
  {/if}
</div>

{#if users.length > 0}
  <ul class="search-results">
    {#each users as user}
      <li>{user.full_name} ({user.ut})</li>
    {/each}
  </ul>
{/if}

<style>
  /* Add your CSS styles here */
  .search-bar-container {
    /* Styling for the search bar container */
  }
  .search-input {
    /* Styling for the search input */
  }
  .search-results {
    /* Styling for the search results */
  }
  .error {
    color: red;
    /* Additional error message styling */
  }
</style>
