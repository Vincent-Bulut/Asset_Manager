

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError

# Assuming the engine and session are set up correctly
engine = create_engine('DATABASE_URL')  # Replace 'DATABASE_URL' with your actual database URL
Session = sessionmaker(bind=engine)

def update_trader_and_allocations(trader_id, trader_data, new_struct_ids):
    session = Session()
    try:
        # Step 1: Fetch existing data
        trader = session.query(Traders).filter_by(id_trader=trader_id).one()
        current_allocations = {alloc.id_struct for alloc in trader.trader_allocations}

        # Step 2: Update Traders table
        for key, value in trader_data.items():
            setattr(trader, key, value)
        
        # Step 3: Update TraderAllocation table
        new_struct_ids = set(new_struct_ids)
        
        # Add new allocations
        allocations_to_add = new_struct_ids - current_allocations
        for id_struct in allocations_to_add:
            new_allocation = TraderAllocation(id_trd=trader_id, id_struct=id_struct)
            session.add(new_allocation)

        # Remove old allocations
        allocations_to_remove = current_allocations - new_struct_ids
        for id_struct in allocations_to_remove:
            # Check if there are any references in TraderTimes
            is_referenced = session.query(TraderTimes).filter_by(id_struct=id_struct).count() > 0
            if not is_referenced:
                allocation_to_remove = session.query(TraderAllocation).filter_by(id_trd=trader_id, id_struct=id_struct).one()
                session.delete(allocation_to_remove)

        # Commit the transaction
        session.commit()
        print("Data updated successfully.")
    except SQLAlchemyError as e:
        session.rollback()
        print(f"An error occurred: {e}")
    finally:
        session.close()

# Example data to update
trader_id = 1
trader_data = {
    'name': 'Jane Doe',
    'business_manager': 'New Manager',  # Adjust according to your model
    # other fields...
}
new_struct_ids = [1, 3, 4]  # List of new structure IDs

# Call the update function
update_trader_and_allocations(trader_id, trader_data, new_struct_ids)