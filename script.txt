from fastapi import FastAPI, Depends, HTTPException, Security
from fastapi.security.api_key import APIKeyHeader
import os

app = FastAPI()

# D√©finition de la cl√© API attendue (id√©alement stock√©e dans une variable d‚Äôenvironnement)
API_KEY = os.getenv("API_KEY", "your-secret-key")
API_KEY_NAME = "X-API-Key"

# D√©claration du header de la cl√© API
api_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=True)

# D√©pendance pour v√©rifier la cl√© API
def verify_api_key(api_key: str = Security(api_key_header)):
    if api_key != API_KEY:
        raise HTTPException(status_code=403, detail="Acc√®s interdit : Cl√© API invalide")
    return api_key

# üî• Appliquer la d√©pendance globalement √† TOUTES les routes üî•
app = FastAPI(dependencies=[Depends(verify_api_key)])

# Route 1 : automatiquement prot√©g√©e
@app.get("/secure-data")
def secure_route():
    return {"message": "Vous avez acc√®s aux donn√©es s√©curis√©es !"}

# Route 2 : aussi prot√©g√©e automatiquement
@app.get("/another-endpoint")
def another_route():
    return {"message": "Encore une route prot√©g√©e !"}
