
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError

# Définir vos modèles ici (Trader, Structure, TraderAllocation)

# Créez un moteur et une session
engine = create_engine('DATABASE_URL')  # Remplacez 'DATABASE_URL' par votre URL de base de données
Session = sessionmaker(bind=engine)

def insert_data(trader_data, structure_data_list, trader_allocation_data_list):
    session = Session()
    try:
        with session.begin():
            # Insérer le trader
            trader = Trader(**trader_data)
            session.add(trader)
            session.flush()  # pour obtenir l'id du trader

            # Insérer les structures
            structures = []
            for structure_data in structure_data_list:
                structure = Structure(**structure_data)
                session.add(structure)
                structures.append(structure)
            session.flush()  # pour obtenir les ids des structures

            # Insérer les allocations de trader
            for allocation_data in trader_allocation_data_list:
                allocation_data['id_trd'] = trader.id_trader  # Associe l'ID du trader
                allocation = TraderAllocation(**allocation_data)
                session.add(allocation)
            
            # Valider la transaction
            session.commit()
            print("Data inserted successfully.")
    except SQLAlchemyError as e:
        session.rollback()
        print(f"An error occurred: {e}")
    finally:
        session.close()

# Exemple de données à insérer
trader_data = {
    'name': 'John Doe',
    'business_manager': 'Manager Name',  # Ajustez selon votre modèle
    # autres champs...
}

structure_data_list = [
    {'name': 'Structure 1', 'code': 'S1', 'type': 'Type 1'},
    {'name': 'Structure 2', 'code': 'S2', 'type': 'Type 2'},
    # autres structures...
]

trader_allocation_data_list = [
    {'id_struct': 1},  # Vous pouvez remplacer par des données appropriées
    {'id_struct': 2},
    # autres allocations...
]

# Appeler la fonction d'insertion
insert_data(trader_data, structure_data_list, trader_allocation_data_list)