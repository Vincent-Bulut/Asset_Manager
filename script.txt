
Voici un composant Svelte simple qui permet d’uploader plusieurs fichiers. Il offre une interface utilisateur basique et gère les événements pour prévisualiser les fichiers sélectionnés avant de les uploader.

Composant MultiFileUploader.svelte

<script>
  let files = [];

  function handleFileSelect(event) {
    const selectedFiles = Array.from(event.target.files);
    files = [...files, ...selectedFiles];
  }

  function removeFile(index) {
    files.splice(index, 1);
    files = [...files];
  }

  function uploadFiles() {
    files.forEach(file => {
      const formData = new FormData();
      formData.append('file', file);

      fetch('/upload', {
        method: 'POST',
        body: formData,
      })
        .then(response => response.json())
        .then(data => {
          console.log('Upload success:', data);
        })
        .catch(error => {
          console.error('Upload error:', error);
        });
    });
  }
</script>

<style>
  .file-list {
    margin-top: 10px;
  }
  .file-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
  }
  .file-name {
    flex: 1;
  }
  .remove-button {
    margin-left: 10px;
    cursor: pointer;
  }
</style>

<div>
  <input type="file" multiple on:change="{handleFileSelect}" />
  <button on:click="{uploadFiles}">Upload Files</button>

  <div class="file-list">
    {#each files as file, index}
      <div class="file-item">
        <span class="file-name">{file.name}</span>
        <span class="remove-button" on:click={() => removeFile(index)}>Remove</span>
      </div>
    {/each}
  </div>
</div>

Fonctionnalités :

	1.	Sélection multiple de fichiers : L’utilisateur peut sélectionner plusieurs fichiers en une seule fois.
	2.	Affichage des fichiers sélectionnés : Une liste des fichiers est affichée avec un bouton pour supprimer un fichier avant l’upload.
	3.	Upload des fichiers : Chaque fichier est envoyé individuellement via fetch à une URL /upload.

Notes :

	•	Vous devez remplacer '/upload' par l’URL de votre backend.
	•	Assurez-vous que votre backend supporte les requêtes multipart/form-data.

N’hésitez pas à personnaliser le composant selon vos besoins !