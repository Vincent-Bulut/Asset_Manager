
Voici un exemple de code pour mettre à jour une table en utilisant un modèle SQLAlchemy, FastAPI, un formulaire, et en communiquant avec le front-end Svelte via Axios.

Backend : FastAPI avec SQLAlchemy et Pydantic

Modèle SQLAlchemy :

from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)

Modèle Pydantic :

from pydantic import BaseModel

class UserUpdate(BaseModel):
    name: str
    email: str

Dépendance pour la session :

from sqlalchemy.orm import Session
from fastapi import Depends
from database import SessionLocal

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

Route FastAPI :

from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from models import User
from schemas import UserUpdate
from dependencies import get_db

app = FastAPI()

@app.put("/users/{user_id}")
async def update_user(user_id: int, user_update: UserUpdate, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    user.name = user_update.name
    user.email = user_update.email
    db.commit()
    db.refresh(user)
    return user

Frontend : Svelte avec Axios

Composant Svelte :

<script>
  import axios from "axios";

  let userId = 1; // ID de l'utilisateur à mettre à jour
  let name = "";
  let email = "";

  async function updateUser() {
    try {
      const response = await axios.put(`http://localhost:8000/users/${userId}`, {
        name: name,
        email: email,
      });
      console.log("User updated:", response.data);
    } catch (error) {
      console.error("Error updating user:", error.response?.data || error.message);
    }
  }
</script>

<form on:submit|preventDefault={updateUser}>
  <label for="name">Name:</label>
  <input type="text" id="name" bind:value={name} required />

  <label for="email">Email:</label>
  <input type="email" id="email" bind:value={email} required />

  <button type="submit">Update User</button>
</form>

Explications :

	1.	Backend (FastAPI) :
	•	La route PUT /users/{user_id} prend un ID utilisateur et un objet JSON avec les champs à mettre à jour.
	•	La fonction vérifie si l’utilisateur existe dans la base de données avant de procéder à la mise à jour.
	•	Elle utilise SQLAlchemy pour interagir avec la base de données.
	2.	Frontend (Svelte) :
	•	Les données du formulaire sont liées aux variables name et email via bind:value.
	•	Lors de la soumission, la fonction updateUser envoie une requête PUT à l’API via Axios.
	3.	Axios :
	•	La bibliothèque Axios est utilisée pour simplifier les requêtes HTTP depuis Svelte.
	4.	Pré-requis :
	•	Assurez-vous que votre serveur FastAPI est en cours d’exécution sur http://localhost:8000.
	•	Remplacez l’URL et les champs selon votre modèle et votre base de données.

Ce code est une base que vous pouvez adapter à votre cas d’usage.