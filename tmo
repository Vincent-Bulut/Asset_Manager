
Pour inclure la fonctionnalité de téléversement de fichiers PDF dans un formulaire Svelte et envoyer les données ainsi que les fichiers à une API FastAPI, voici une solution complète :

1. Front-end : Formulaire avec téléversement de fichiers

Modifiez le formulaire Svelte pour inclure un champ d’upload de fichiers.

<script>
  import axios from 'axios';

  let folderName = '';
  let description = '';
  let category = '';
  let files = []; // Pour stocker les fichiers sélectionnés
  let errors = {};

  function validateForm() {
    const newErrors = {};

    if (!folderName.trim()) {
      newErrors.folderName = "Folder name is required";
    } else if (folderName.length < 3) {
      newErrors.folderName = "Folder name must be at least 3 characters";
    }

    if (!description.trim()) {
      newErrors.description = "Description is required";
    }

    if (!category) {
      newErrors.category = "Category is required";
    }

    if (files.length === 0) {
      newErrors.files = "At least one PDF file is required";
    } else if (!files.every(file => file.type === "application/pdf")) {
      newErrors.files = "Only PDF files are allowed";
    }

    errors = newErrors;

    return Object.keys(newErrors).length === 0;
  }

  async function handleSubmit() {
    if (!validateForm()) {
      return;
    }

    try {
      const formData = new FormData();
      formData.append('folder_name', folderName);
      formData.append('description', description);
      formData.append('category', category);
      files.forEach(file => formData.append('files', file)); // Ajoute tous les fichiers

      const response = await axios.post('http://localhost:8000/submit-form', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log('Success:', response.data);
    } catch (error) {
      console.error('Error submitting form:', error);
    }
  }
</script>

<form on:submit|preventDefault={handleSubmit} class="form-container">
  <h2>Create a New Folder</h2>
  
  <div class="form-group">
    <label for="folderName">Folder Name:</label>
    <input
      type="text"
      id="folderName"
      bind:value={folderName}
      required
      minlength="3"
      class={errors.folderName ? 'error' : ''}
    />
    {#if errors.folderName}
      <span class="error-message">{errors.folderName}</span>
    {/if}
  </div>

  <div class="form-group">
    <label for="description">Description:</label>
    <textarea
      id="description"
      bind:value={description}
      required
      class={errors.description ? 'error' : ''}
    ></textarea>
    {#if errors.description}
      <span class="error-message">{errors.description}</span>
    {/if}
  </div>

  <div class="form-group">
    <label for="category">Category:</label>
    <select id="category" bind:value={category} required class={errors.category ? 'error' : ''}>
      <option value="">Select</option>
      <option value="work">Work</option>
      <option value="personal">Personal</option>
      <option value="other">Other</option>
    </select>
    {#if errors.category}
      <span class="error-message">{errors.category}</span>
    {/if}
  </div>

  <div class="form-group">
    <label for="files">Upload PDF Files:</label>
    <input
      type="file"
      id="files"
      multiple
      accept="application/pdf"
      on:change={(e) => files = Array.from(e.target.files)}
      class={errors.files ? 'error' : ''}
    />
    {#if errors.files}
      <span class="error-message">{errors.files}</span>
    {/if}
  </div>

  <button type="submit">Submit</button>
</form>

<style>
  .form-group {
    margin-bottom: 1rem;
  }

  .error {
    border-color: red;
  }

  .error-message {
    color: red;
    font-size: 0.875rem;
  }

  button {
    background-color: #007bff;
    color: white;
    padding: 0.75rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:hover {
    background-color: #0056b3;
  }
</style>

2. Back-end : API FastAPI avec téléversement de fichiers

Voici comment gérer les données reçues (y compris les fichiers PDF) dans FastAPI :

from fastapi import FastAPI, Form, UploadFile, File
from pydantic import BaseModel
from typing import List

app = FastAPI()

@app.post("/submit-form")
async def submit_form(
    folder_name: str = Form(...),
    description: str = Form(...),
    category: str = Form(...),
    files: List[UploadFile] = File(...)
):
    uploaded_files = []
    for file in files:
        if file.content_type != "application/pdf":
            return {"error": f"File {file.filename} is not a PDF"}
        uploaded_files.append({"filename": file.filename, "content_type": file.content_type})
    
    return {
        "message": "Form submitted successfully!",
        "folder_name": folder_name,
        "description": description,
        "category": category,
        "files": uploaded_files
    }

Explications :

	•	Form : Récupère les champs du formulaire standard.
	•	File : Gère les fichiers envoyés via le champ d’upload.
	•	List[UploadFile] : Permet de recevoir plusieurs fichiers.

3. Étapes supplémentaires :

	•	Validation côté serveur : Vérifiez que tous les fichiers sont bien des PDF.
	•	Sauvegarde des fichiers : Vous pouvez sauvegarder les fichiers sur le serveur si nécessaire :

with open(f"uploads/{file.filename}", "wb") as buffer:
    buffer.write(file.file.read())

Conclusion :

	•	Front-end : Utilisez FormData pour envoyer les données du formulaire et les fichiers.
	•	Back-end : Utilisez FastAPI pour recevoir à la fois les données et les fichiers avec une validation côté serveur.