
import pandas as pd
import numpy as np
import re

# Création d'un exemple de DataFrame avec des colonnes nommées contenant des maturités
data = np.random.rand(10, 900)
columns = [f"col_{i}_M{i % 10 + 1}" for i in range(900)]  # Colonnes avec maturité M1, M2,...M10 répétées
df = pd.DataFrame(data, columns=columns)

# Étape 1 : Extraire la maturité depuis le nom des colonnes avec une regex
def extract_maturity(column_name):
    # Ici on suppose que la maturité est après le dernier '_M' suivi d'un nombre, comme dans 'col_100_M15'
    match = re.search(r'_M(\d+)', column_name)
    return int(match.group(1)) if match else 1  # Si pas de maturité, on prend une valeur par défaut (1 ici)

# Extraire les maturités pour les colonnes de 99 à 200
maturities = [extract_maturity(col) for col in df.columns[99:201]]

# Étape 2 : Appliquer la transformation (différence) multipliée par la maturité
cols_to_transform = df.iloc[:, 99:201].values

for i in range(1, cols_to_transform.shape[1]):
    # Soustraction puis multiplication par la maturité associée
    cols_to_transform[:, i] = (cols_to_transform[:, i] - cols_to_transform[:, i-1]) * maturities[i]

# Étape 3 : Réinjecter les résultats dans le DataFrame
df.iloc[:, 100:201] = cols_to_transform[:, 1:]

# Vérification : Afficher les colonnes 99 à 201 pour voir la transformation
print(df.iloc[:, 99:201])