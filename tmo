
Pour implémenter une search bar permettant de filtrer et sélectionner les trading entities dans un tableau, vous pouvez suivre ces étapes :

1. **Afficher les trading entities existantes**.
2. **Ajouter une barre de recherche pour filtrer les trading entities disponibles**.
3. **Permettre la sélection des trading entities filtrées dans un tableau**.
4. **Ajouter les trading entities sélectionnées à la liste existante et mettre à jour l'API**.

Voici comment vous pouvez le faire en Svelte :

### `TradingEntities.svelte`
```svelte
<script>
  import { onMount } from 'svelte';
  import { writable } from 'svelte/store';

  let tradingEntities = writable([]);
  let availableEntities = ['E14023', 'E14027', 'E14030', 'E14031']; // Exemple de nouvelles entités disponibles
  let searchQuery = writable('');
  let filteredEntities = writable([]);
  let selectedEntities = writable([]);

  // Fonction pour charger les trading entities depuis l'API
  async function loadTradingEntities() {
    try {
      const response = await fetch('https://api.exemple.com/structure'); // Remplacez par l'URL de votre API
      const data = await response.json();
      tradingEntities.set(data.trading_entities.split(',')); // Supposons que l'attribut est `trading_entities`
    } catch (error) {
      console.error('Erreur lors du chargement des trading entities:', error);
    }
  }

  // Fonction pour filtrer les entités disponibles en fonction de la recherche
  function filterEntities() {
    const query = $searchQuery.toLowerCase();
    filteredEntities.set(availableEntities.filter(entity => entity.toLowerCase().includes(query)));
  }

  // Fonction pour ajouter les trading entities sélectionnées
  function addTradingEntities() {
    tradingEntities.update(current => {
      selectedEntities.update(selected => {
        selected.forEach(entity => {
          if (!current.includes(entity) && entity !== '') {
            current.push(entity);
          }
        });
        updateTradingEntitiesOnServer(current); // Mise à jour de l'API
        return [];
      });
      return current;
    });
  }

  // Fonction pour mettre à jour les trading entities sur le serveur
  async function updateTradingEntitiesOnServer(entities) {
    try {
      const response = await fetch('https://api.exemple.com/structure', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ trading_entities: entities.join(',') }),
      });
      const data = await response.json();
      console.log('Mise à jour réussie:', data);
    } catch (error) {
      console.error('Erreur lors de la mise à jour des trading entities:', error);
    }
  }

  $: $searchQuery, filterEntities(); // Mettre à jour les entités filtrées à chaque changement de recherche

  onMount(() => {
    loadTradingEntities();
    filterEntities(); // Initialiser les entités filtrées
  });
</script>

<style>
  /* Ajoutez du style si nécessaire */
</style>

<div>
  <h2>Trading Entities</h2>
  <ul>
    {#each $tradingEntities as entity}
      <li>{entity}</li>
    {/each}
  </ul>

  <h3>Ajouter de nouvelles Trading Entities</h3>
  <input type="text" bind:value={$searchQuery} placeholder="Rechercher une trading entity" />

  <table>
    <thead>
      <tr>
        <th>Sélectionner</th>
        <th>Trading Entity</th>
      </tr>
    </thead>
    <tbody>
      {#each $filteredEntities as entity}
        <tr>
          <td><input type="checkbox" bind:group={$selectedEntities} value={entity} /></td>
          <td>{entity}</td>
        </tr>
      {/each}
    </tbody>
  </table>

  <button on:click={addTradingEntities}>Ajouter les sélectionnées</button>
</div>
```

### Explications

1. **Stores Svelte** :
   - `tradingEntities` : Stocke les trading entities actuelles chargées depuis l'API.
   - `availableEntities` : Stocke toutes les trading entities disponibles pour ajout.
   - `searchQuery` : Stocke la requête de recherche entrée par l'utilisateur.
   - `filteredEntities` : Stocke les trading entities filtrées en fonction de la requête de recherche.
   - `selectedEntities` : Stocke les trading entities sélectionnées via les cases à cocher dans le tableau.

2. **Fonctions principales** :
   - `loadTradingEntities` : Charge les trading entities existantes depuis l'API et les stocke dans `tradingEntities`.
   - `filterEntities` : Filtre les trading entities disponibles en fonction de la requête de recherche et met à jour `filteredEntities`.
   - `addTradingEntities` : Ajoute les nouvelles trading entities sélectionnées à `tradingEntities` si elles n'existent pas déjà, puis met à jour l'API avec la liste complète des trading entities.
   - `updateTradingEntitiesOnServer` : Met à jour les trading entities sur le serveur.

3. **Interface utilisateur** :
   - Affiche les trading entities existantes dans une liste.
   - Affiche une barre de recherche pour filtrer les trading entities disponibles.
   - Affiche un tableau avec les trading entities filtrées et des cases à cocher pour les sélectionner.
   - Bouton pour ajouter les trading entities sélectionnées.

4. **Réactivité** :
   - Utilise `$: $searchQuery, filterEntities()` pour mettre à jour automatiquement les entités filtrées chaque fois que la requête de recherche change.

Cette implémentation permet de rechercher et de sélectionner plusieurs trading entities à ajouter, puis de mettre à jour l'API en conséquence. Vous pouvez adapter et étendre ce code en fonction de vos besoins spécifiques.